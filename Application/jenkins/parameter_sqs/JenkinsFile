pipeline {
    agent any
    // agent {
    //     label 'cz-bb-jenkins-slave1' // Replace with your slave label
    // }
    parameters {
        // Add a parameter for environment
        choice(name: 'ENVIRONMENT', choices: ['stage', 'infra', 'prod1', 'prod2'], description: 'Select the environment')
        // Add parameters for window_target as JSON strings for each environment
        string(name: 'STAGE_WINDOW_TARGET_JSON', defaultValue: '{"key":"tag:PatchGroup","values":"WinUpdate"}', description: 'JSON representation of window_target map for Stage')
        string(name: 'INFRA_WINDOW_TARGET_JSON', defaultValue: '{"key":"tag:PatchGroup","values":"InfraWindows"}', description: 'JSON representation of window_target map for Infra')
        string(name: 'PROD1_WINDOW_TARGET_JSON', defaultValue: '{"key":"tag:PatchGroup","values":"Prod1Windows"}', description: 'JSON representation of window_target map for Prod1')
        string(name: 'PROD2_WINDOW_TARGET_JSON', defaultValue: '{"key":"tag:PatchGroup","values":"Prod2Windows"}', description: 'JSON representation of window_target map for Prod2')
        
    }
    environment {
        S3_BUCKET = 'ssm-patch-automation-cz' // Replace with your bucket
        S3_OBJECT_KEY = 's3://ssm-patch-automation-cz/ENV/ssm_windows_patching/' // Specify the URI from the S3 bucket
        WORK_DIR = "${WORKSPACE}/terraform-code"
        PLAN_FILE = "${WORK_DIR}/tfplan"
        SQS_QUEUE_URL = 'https://sqs.us-east-2.amazonaws.com/980783347387/ssm_patch_automation_queue.fifo'
        REGION_NAME = 'us-east-2'
    }
    stages {
        stage('Download Terraform Code') {
            steps {
                echo '--- Downloading Terraform Code ---'
                script {
                    // Create a directory to store Terraform code
                    sh "mkdir -p ${WORK_DIR}"
                    // Download the Terraform code folder from S3
                    sh "aws s3 sync ${S3_OBJECT_KEY} ${WORK_DIR}"
                }
            }
        }
        stage('Terraform Init') {
            steps {
                echo '--- Initializing Terraform ---'
                script {
                    sh "cd ${WORK_DIR} && terraform init"
                }
            }
        }
        stage('Terraform Plan') {
            steps {
                echo '--- Creating Terraform Plan ---'
                script {
                    def selectedEnvironment = params.ENVIRONMENT
                    echo "Received environment in Jenkins: ${selectedEnvironment}"
                    // Passing the environment-specific variable to Terraform
                    def windowTargetMap = [
                        'stage': params.STAGE_WINDOW_TARGET_JSON,
                        'infra': params.INFRA_WINDOW_TARGET_JSON,
                        'prod1': params.PROD1_WINDOW_TARGET_JSON,
                        'prod2': params.PROD2_WINDOW_TARGET_JSON
                    ]
                    // Pass the appropriate environment-specific variable to your Terraform module
                    def windowTarget = windowTargetMap[selectedEnvironment]
                    sh "cd ${WORK_DIR} && terraform plan -var 'window_target=${windowTarget}' -out=tfplan | sed 's/\\x1B\\[[0-9;]*[mK]//g'"
                    // Stash the tfplan file
                    // stash(name: 'tfplan_stash', includes: '**/tfplan')
                }
            }
        }
        stage('Extract Message from SQS Queue') {
            steps {
                script {
                    sh 'jq --version'
                    // sh 'cd ${WORK_DIR} && aws sqs receive-message --queue-url ${SQS_QUEUE_URL} --region ${REGION_NAME}'
                    sh "cd ${WORK_DIR} && aws sqs receive-message --queue-url ${SQS_QUEUE_URL} --region ${REGION_NAME} | jq -r '.Messages[].Body'> ${WORK_DIR}/temp.json"
                    sh "ls ${WORK_DIR}"
                    result = readFile('terraform-code/temp.json')
                    
                    // Set the environment variable to the extracted message
                    echo result
                    env.EXTRACTED_MESSAGE = result.trim()
                    echo EXTRACTED_MESSAGE
                }
            }
        }
        stage('Confirm Plan') {
            steps {
                script{
                    // tmp = env.EXTRACTED_MESSAGE.equals('Proceed').toString().trim()
                    if (env.EXTRACTED_MESSAGE.equals('Proceed')) {
                        echo "Proceeding to next stage"
                    }
                    else {
                        echo "Aborting Pipeline"
                    }
                }
            }
        }
        // stage('Terraform Apply') {
        //     steps {
        //         echo '--- Applying Terraform Plan ---'
        //         script {
        //             // unstash 'tfplan_stash'
        //             sh 'ls ${WORK_DIR}'
        //             def applyOutput = sh(script: "cd ${WORK_DIR} && terraform apply -auto-approve tfplan", returnStatus: true, returnStdout: true)
        //             echo "Terraform Apply Output:\n${applyOutput}"
        //         }
        //     }
        // }
        stage('Terraform Destroy') {
            steps {
                echo '--- Destroy Terraform Plan ---'
                script {
                    // Passing the environment-specific variable to Terraform
                    def windowTargetMap = [
                        'stage': params.STAGE_WINDOW_TARGET_JSON,
                        'infra': params.INFRA_WINDOW_TARGET_JSON,
                        'prod1': params.PROD1_WINDOW_TARGET_JSON,
                        'prod2': params.PROD2_WINDOW_TARGET_JSON
                    ]
                    // Pass the appropriate environment-specific variable to your Terraform module
                    def selectedEnvironment = params.ENVIRONMENT
                    def windowTarget = windowTargetMap[selectedEnvironment]
                    sh "cd ${WORK_DIR} && terraform plan -var 'window_target=${windowTarget}' -destroy -out=destroyPlan"
                    // sh "cp tfplan cleanedtfplan | sed 's/\\x1B\\[[0-9;]*[mK]//g' > cleanedtfplan"
                    // def tfplanPath = "${WORK_DIR}/cleanedtfplan"
                    // sh "echo 'Here is the Plan: ' && cat ${tfplanPath}"
                    def applyOutput = sh(script: "cd ${WORK_DIR} && terraform apply -auto-approve destroyPlan", returnStatus: true, returnStdout: true)
                    echo "Terraform Destroy Output:\n${applyOutput}"
                }
            }
        }
    }
}